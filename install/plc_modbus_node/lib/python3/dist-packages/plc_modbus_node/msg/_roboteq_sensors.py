# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from plc_modbus_node/roboteq_sensors.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class roboteq_sensors(genpy.Message):
  _md5sum = "606f1c09375b9956f0c561c460b7d996"
  _type = "plc_modbus_node/roboteq_sensors"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 speed_left
int32 speed_right
uint32 encoder_left
uint32 encoder_right
float32 amps_left 
float32 amps_right
float32 volts_batt
string fault_flag
uint16 refresh_rate
uint16 time_elapsed"""
  __slots__ = ['speed_left','speed_right','encoder_left','encoder_right','amps_left','amps_right','volts_batt','fault_flag','refresh_rate','time_elapsed']
  _slot_types = ['int32','int32','uint32','uint32','float32','float32','float32','string','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       speed_left,speed_right,encoder_left,encoder_right,amps_left,amps_right,volts_batt,fault_flag,refresh_rate,time_elapsed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(roboteq_sensors, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.speed_left is None:
        self.speed_left = 0
      if self.speed_right is None:
        self.speed_right = 0
      if self.encoder_left is None:
        self.encoder_left = 0
      if self.encoder_right is None:
        self.encoder_right = 0
      if self.amps_left is None:
        self.amps_left = 0.
      if self.amps_right is None:
        self.amps_right = 0.
      if self.volts_batt is None:
        self.volts_batt = 0.
      if self.fault_flag is None:
        self.fault_flag = ''
      if self.refresh_rate is None:
        self.refresh_rate = 0
      if self.time_elapsed is None:
        self.time_elapsed = 0
    else:
      self.speed_left = 0
      self.speed_right = 0
      self.encoder_left = 0
      self.encoder_right = 0
      self.amps_left = 0.
      self.amps_right = 0.
      self.volts_batt = 0.
      self.fault_flag = ''
      self.refresh_rate = 0
      self.time_elapsed = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i2I3f().pack(_x.speed_left, _x.speed_right, _x.encoder_left, _x.encoder_right, _x.amps_left, _x.amps_right, _x.volts_batt))
      _x = self.fault_flag
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2H().pack(_x.refresh_rate, _x.time_elapsed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.speed_left, _x.speed_right, _x.encoder_left, _x.encoder_right, _x.amps_left, _x.amps_right, _x.volts_batt,) = _get_struct_2i2I3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fault_flag = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fault_flag = str[start:end]
      _x = self
      start = end
      end += 4
      (_x.refresh_rate, _x.time_elapsed,) = _get_struct_2H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i2I3f().pack(_x.speed_left, _x.speed_right, _x.encoder_left, _x.encoder_right, _x.amps_left, _x.amps_right, _x.volts_batt))
      _x = self.fault_flag
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2H().pack(_x.refresh_rate, _x.time_elapsed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.speed_left, _x.speed_right, _x.encoder_left, _x.encoder_right, _x.amps_left, _x.amps_right, _x.volts_batt,) = _get_struct_2i2I3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fault_flag = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fault_flag = str[start:end]
      _x = self
      start = end
      end += 4
      (_x.refresh_rate, _x.time_elapsed,) = _get_struct_2H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2H = None
def _get_struct_2H():
    global _struct_2H
    if _struct_2H is None:
        _struct_2H = struct.Struct("<2H")
    return _struct_2H
_struct_2i2I3f = None
def _get_struct_2i2I3f():
    global _struct_2i2I3f
    if _struct_2i2I3f is None:
        _struct_2i2I3f = struct.Struct("<2i2I3f")
    return _struct_2i2I3f
