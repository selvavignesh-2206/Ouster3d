// Generated by gencpp from file atc_msgs/Latch.msg
// DO NOT EDIT!


#ifndef ATC_MSGS_MESSAGE_LATCH_H
#define ATC_MSGS_MESSAGE_LATCH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace atc_msgs
{
template <class ContainerAllocator>
struct Latch_
{
  typedef Latch_<ContainerAllocator> Type;

  Latch_()
    : latch(false)
    , command_string()  {
    }
  Latch_(const ContainerAllocator& _alloc)
    : latch(false)
    , command_string(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _latch_type;
  _latch_type latch;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _command_string_type;
  _command_string_type command_string;





  typedef boost::shared_ptr< ::atc_msgs::Latch_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atc_msgs::Latch_<ContainerAllocator> const> ConstPtr;

}; // struct Latch_

typedef ::atc_msgs::Latch_<std::allocator<void> > Latch;

typedef boost::shared_ptr< ::atc_msgs::Latch > LatchPtr;
typedef boost::shared_ptr< ::atc_msgs::Latch const> LatchConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::atc_msgs::Latch_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::atc_msgs::Latch_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::atc_msgs::Latch_<ContainerAllocator1> & lhs, const ::atc_msgs::Latch_<ContainerAllocator2> & rhs)
{
  return lhs.latch == rhs.latch &&
    lhs.command_string == rhs.command_string;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::atc_msgs::Latch_<ContainerAllocator1> & lhs, const ::atc_msgs::Latch_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace atc_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::atc_msgs::Latch_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::atc_msgs::Latch_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::atc_msgs::Latch_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::atc_msgs::Latch_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atc_msgs::Latch_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atc_msgs::Latch_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::atc_msgs::Latch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dab9fbccb068ab4480fef51e7250963c";
  }

  static const char* value(const ::atc_msgs::Latch_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdab9fbccb068ab44ULL;
  static const uint64_t static_value2 = 0x80fef51e7250963cULL;
};

template<class ContainerAllocator>
struct DataType< ::atc_msgs::Latch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "atc_msgs/Latch";
  }

  static const char* value(const ::atc_msgs::Latch_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::atc_msgs::Latch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Incoming parameter of the service. For Docking\n"
"bool latch\n"
"string command_string\n"
"\n"
"\n"
;
  }

  static const char* value(const ::atc_msgs::Latch_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::atc_msgs::Latch_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.latch);
      stream.next(m.command_string);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Latch_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::atc_msgs::Latch_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::atc_msgs::Latch_<ContainerAllocator>& v)
  {
    s << indent << "latch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.latch);
    s << indent << "command_string: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.command_string);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ATC_MSGS_MESSAGE_LATCH_H
