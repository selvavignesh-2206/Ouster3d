// Generated by gencpp from file atc_msgs/Detector_Has_Solution.msg
// DO NOT EDIT!


#ifndef ATC_MSGS_MESSAGE_DETECTOR_HAS_SOLUTION_H
#define ATC_MSGS_MESSAGE_DETECTOR_HAS_SOLUTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace atc_msgs
{
template <class ContainerAllocator>
struct Detector_Has_Solution_
{
  typedef Detector_Has_Solution_<ContainerAllocator> Type;

  Detector_Has_Solution_()
    : hasSolution(false)
    , east_meters(0.0)
    , north_meters(0.0)
    , headingDeg(0.0)  {
    }
  Detector_Has_Solution_(const ContainerAllocator& _alloc)
    : hasSolution(false)
    , east_meters(0.0)
    , north_meters(0.0)
    , headingDeg(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _hasSolution_type;
  _hasSolution_type hasSolution;

   typedef double _east_meters_type;
  _east_meters_type east_meters;

   typedef double _north_meters_type;
  _north_meters_type north_meters;

   typedef double _headingDeg_type;
  _headingDeg_type headingDeg;





  typedef boost::shared_ptr< ::atc_msgs::Detector_Has_Solution_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atc_msgs::Detector_Has_Solution_<ContainerAllocator> const> ConstPtr;

}; // struct Detector_Has_Solution_

typedef ::atc_msgs::Detector_Has_Solution_<std::allocator<void> > Detector_Has_Solution;

typedef boost::shared_ptr< ::atc_msgs::Detector_Has_Solution > Detector_Has_SolutionPtr;
typedef boost::shared_ptr< ::atc_msgs::Detector_Has_Solution const> Detector_Has_SolutionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::atc_msgs::Detector_Has_Solution_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::atc_msgs::Detector_Has_Solution_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::atc_msgs::Detector_Has_Solution_<ContainerAllocator1> & lhs, const ::atc_msgs::Detector_Has_Solution_<ContainerAllocator2> & rhs)
{
  return lhs.hasSolution == rhs.hasSolution &&
    lhs.east_meters == rhs.east_meters &&
    lhs.north_meters == rhs.north_meters &&
    lhs.headingDeg == rhs.headingDeg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::atc_msgs::Detector_Has_Solution_<ContainerAllocator1> & lhs, const ::atc_msgs::Detector_Has_Solution_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace atc_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::atc_msgs::Detector_Has_Solution_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::atc_msgs::Detector_Has_Solution_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::atc_msgs::Detector_Has_Solution_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::atc_msgs::Detector_Has_Solution_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atc_msgs::Detector_Has_Solution_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atc_msgs::Detector_Has_Solution_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::atc_msgs::Detector_Has_Solution_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3edd9e2d3d645c627790e3c04b21c4dc";
  }

  static const char* value(const ::atc_msgs::Detector_Has_Solution_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3edd9e2d3d645c62ULL;
  static const uint64_t static_value2 = 0x7790e3c04b21c4dcULL;
};

template<class ContainerAllocator>
struct DataType< ::atc_msgs::Detector_Has_Solution_<ContainerAllocator> >
{
  static const char* value()
  {
    return "atc_msgs/Detector_Has_Solution";
  }

  static const char* value(const ::atc_msgs::Detector_Has_Solution_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::atc_msgs::Detector_Has_Solution_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Incoming parameter of the service. For Trolley engagement\n"
"bool hasSolution\n"
"float64 east_meters\n"
"float64 north_meters\n"
"float64 headingDeg\n"
;
  }

  static const char* value(const ::atc_msgs::Detector_Has_Solution_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::atc_msgs::Detector_Has_Solution_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hasSolution);
      stream.next(m.east_meters);
      stream.next(m.north_meters);
      stream.next(m.headingDeg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Detector_Has_Solution_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::atc_msgs::Detector_Has_Solution_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::atc_msgs::Detector_Has_Solution_<ContainerAllocator>& v)
  {
    s << indent << "hasSolution: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hasSolution);
    s << indent << "east_meters: ";
    Printer<double>::stream(s, indent + "  ", v.east_meters);
    s << indent << "north_meters: ";
    Printer<double>::stream(s, indent + "  ", v.north_meters);
    s << indent << "headingDeg: ";
    Printer<double>::stream(s, indent + "  ", v.headingDeg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ATC_MSGS_MESSAGE_DETECTOR_HAS_SOLUTION_H
