// Generated by gencpp from file device_diagnostics/device_connection.msg
// DO NOT EDIT!


#ifndef DEVICE_DIAGNOSTICS_MESSAGE_DEVICE_CONNECTION_H
#define DEVICE_DIAGNOSTICS_MESSAGE_DEVICE_CONNECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace device_diagnostics
{
template <class ContainerAllocator>
struct device_connection_
{
  typedef device_connection_<ContainerAllocator> Type;

  device_connection_()
    : d435_front(false)
    , d435_back(false)
    , laser_frontleft(false)
    , laser_backright(false)
    , ouster(false)  {
    }
  device_connection_(const ContainerAllocator& _alloc)
    : d435_front(false)
    , d435_back(false)
    , laser_frontleft(false)
    , laser_backright(false)
    , ouster(false)  {
  (void)_alloc;
    }



   typedef uint8_t _d435_front_type;
  _d435_front_type d435_front;

   typedef uint8_t _d435_back_type;
  _d435_back_type d435_back;

   typedef uint8_t _laser_frontleft_type;
  _laser_frontleft_type laser_frontleft;

   typedef uint8_t _laser_backright_type;
  _laser_backright_type laser_backright;

   typedef uint8_t _ouster_type;
  _ouster_type ouster;





  typedef boost::shared_ptr< ::device_diagnostics::device_connection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::device_diagnostics::device_connection_<ContainerAllocator> const> ConstPtr;

}; // struct device_connection_

typedef ::device_diagnostics::device_connection_<std::allocator<void> > device_connection;

typedef boost::shared_ptr< ::device_diagnostics::device_connection > device_connectionPtr;
typedef boost::shared_ptr< ::device_diagnostics::device_connection const> device_connectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::device_diagnostics::device_connection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::device_diagnostics::device_connection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::device_diagnostics::device_connection_<ContainerAllocator1> & lhs, const ::device_diagnostics::device_connection_<ContainerAllocator2> & rhs)
{
  return lhs.d435_front == rhs.d435_front &&
    lhs.d435_back == rhs.d435_back &&
    lhs.laser_frontleft == rhs.laser_frontleft &&
    lhs.laser_backright == rhs.laser_backright &&
    lhs.ouster == rhs.ouster;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::device_diagnostics::device_connection_<ContainerAllocator1> & lhs, const ::device_diagnostics::device_connection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace device_diagnostics

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::device_diagnostics::device_connection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::device_diagnostics::device_connection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::device_diagnostics::device_connection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::device_diagnostics::device_connection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::device_diagnostics::device_connection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::device_diagnostics::device_connection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::device_diagnostics::device_connection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d7f91e02d3f856fb6f0a65776f519a29";
  }

  static const char* value(const ::device_diagnostics::device_connection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd7f91e02d3f856fbULL;
  static const uint64_t static_value2 = 0x6f0a65776f519a29ULL;
};

template<class ContainerAllocator>
struct DataType< ::device_diagnostics::device_connection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "device_diagnostics/device_connection";
  }

  static const char* value(const ::device_diagnostics::device_connection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::device_diagnostics::device_connection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool d435_front\n"
"bool d435_back\n"
"bool laser_frontleft\n"
"bool laser_backright\n"
"bool ouster\n"
;
  }

  static const char* value(const ::device_diagnostics::device_connection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::device_diagnostics::device_connection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.d435_front);
      stream.next(m.d435_back);
      stream.next(m.laser_frontleft);
      stream.next(m.laser_backright);
      stream.next(m.ouster);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct device_connection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::device_diagnostics::device_connection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::device_diagnostics::device_connection_<ContainerAllocator>& v)
  {
    s << indent << "d435_front: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.d435_front);
    s << indent << "d435_back: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.d435_back);
    s << indent << "laser_frontleft: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.laser_frontleft);
    s << indent << "laser_backright: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.laser_backright);
    s << indent << "ouster: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ouster);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEVICE_DIAGNOSTICS_MESSAGE_DEVICE_CONNECTION_H
