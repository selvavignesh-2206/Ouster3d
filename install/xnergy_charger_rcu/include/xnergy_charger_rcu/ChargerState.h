// Generated by gencpp from file xnergy_charger_rcu/ChargerState.msg
// DO NOT EDIT!


#ifndef XNERGY_CHARGER_RCU_MESSAGE_CHARGERSTATE_H
#define XNERGY_CHARGER_RCU_MESSAGE_CHARGERSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace xnergy_charger_rcu
{
template <class ContainerAllocator>
struct ChargerState_
{
  typedef ChargerState_<ContainerAllocator> Type;

  ChargerState_()
    : header()
    , state(0)
    , message()  {
    }
  ChargerState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , state(0)
    , message(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int16_t _state_type;
  _state_type state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _message_type;
  _message_type message;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(RCU_NOT_CONNECTED)
  #undef RCU_NOT_CONNECTED
#endif
#if defined(_WIN32) && defined(RCU_IDLE)
  #undef RCU_IDLE
#endif
#if defined(_WIN32) && defined(RCU_RESERVE_0)
  #undef RCU_RESERVE_0
#endif
#if defined(_WIN32) && defined(RCU_HANDSHAKE_0)
  #undef RCU_HANDSHAKE_0
#endif
#if defined(_WIN32) && defined(RCU_HANDSHAKE_1)
  #undef RCU_HANDSHAKE_1
#endif
#if defined(_WIN32) && defined(RCU_HANDSHAKE_2)
  #undef RCU_HANDSHAKE_2
#endif
#if defined(_WIN32) && defined(RCU_CHARGING)
  #undef RCU_CHARGING
#endif
#if defined(_WIN32) && defined(RCU_STOP)
  #undef RCU_STOP
#endif
#if defined(_WIN32) && defined(RCU_RESERVE_1)
  #undef RCU_RESERVE_1
#endif
#if defined(_WIN32) && defined(RCU_RESERVE_2)
  #undef RCU_RESERVE_2
#endif
#if defined(_WIN32) && defined(RCU_ERROR)
  #undef RCU_ERROR
#endif

  enum {
    RCU_NOT_CONNECTED = 250,
    RCU_IDLE = 0,
    RCU_RESERVE_0 = 1,
    RCU_HANDSHAKE_0 = 2,
    RCU_HANDSHAKE_1 = 3,
    RCU_HANDSHAKE_2 = 4,
    RCU_CHARGING = 5,
    RCU_STOP = 6,
    RCU_RESERVE_1 = 7,
    RCU_RESERVE_2 = 240,
    RCU_ERROR = 238,
  };


  typedef boost::shared_ptr< ::xnergy_charger_rcu::ChargerState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xnergy_charger_rcu::ChargerState_<ContainerAllocator> const> ConstPtr;

}; // struct ChargerState_

typedef ::xnergy_charger_rcu::ChargerState_<std::allocator<void> > ChargerState;

typedef boost::shared_ptr< ::xnergy_charger_rcu::ChargerState > ChargerStatePtr;
typedef boost::shared_ptr< ::xnergy_charger_rcu::ChargerState const> ChargerStateConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xnergy_charger_rcu::ChargerState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xnergy_charger_rcu::ChargerState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::xnergy_charger_rcu::ChargerState_<ContainerAllocator1> & lhs, const ::xnergy_charger_rcu::ChargerState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.state == rhs.state &&
    lhs.message == rhs.message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::xnergy_charger_rcu::ChargerState_<ContainerAllocator1> & lhs, const ::xnergy_charger_rcu::ChargerState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace xnergy_charger_rcu

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::xnergy_charger_rcu::ChargerState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xnergy_charger_rcu::ChargerState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xnergy_charger_rcu::ChargerState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xnergy_charger_rcu::ChargerState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xnergy_charger_rcu::ChargerState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xnergy_charger_rcu::ChargerState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xnergy_charger_rcu::ChargerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8aa93a3e7b3a3bcee20970d27bc8fac9";
  }

  static const char* value(const ::xnergy_charger_rcu::ChargerState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8aa93a3e7b3a3bceULL;
  static const uint64_t static_value2 = 0xe20970d27bc8fac9ULL;
};

template<class ContainerAllocator>
struct DataType< ::xnergy_charger_rcu::ChargerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xnergy_charger_rcu/ChargerState";
  }

  static const char* value(const ::xnergy_charger_rcu::ChargerState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xnergy_charger_rcu::ChargerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 RCU_NOT_CONNECTED = 250\n"
"\n"
"int16 RCU_IDLE = 0\n"
"\n"
"int16 RCU_RESERVE_0 = 1\n"
"\n"
"int16 RCU_HANDSHAKE_0 = 2\n"
"int16 RCU_HANDSHAKE_1 = 3\n"
"int16 RCU_HANDSHAKE_2 = 4\n"
"\n"
"int16 RCU_CHARGING = 5\n"
"int16 RCU_STOP = 6\n"
"\n"
"int16 RCU_RESERVE_1 = 7\n"
"int16 RCU_RESERVE_2 = 240\n"
"int16 RCU_ERROR = 238\n"
"\n"
"Header header\n"
"int16 state\n"
"string message\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::xnergy_charger_rcu::ChargerState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xnergy_charger_rcu::ChargerState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.state);
      stream.next(m.message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChargerState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xnergy_charger_rcu::ChargerState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xnergy_charger_rcu::ChargerState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "state: ";
    Printer<int16_t>::stream(s, indent + "  ", v.state);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XNERGY_CHARGER_RCU_MESSAGE_CHARGERSTATE_H
