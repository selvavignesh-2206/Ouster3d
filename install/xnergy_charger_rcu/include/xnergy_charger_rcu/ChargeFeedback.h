// Generated by gencpp from file xnergy_charger_rcu/ChargeFeedback.msg
// DO NOT EDIT!


#ifndef XNERGY_CHARGER_RCU_MESSAGE_CHARGEFEEDBACK_H
#define XNERGY_CHARGER_RCU_MESSAGE_CHARGEFEEDBACK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <xnergy_charger_rcu/ChargerState.h>

namespace xnergy_charger_rcu
{
template <class ContainerAllocator>
struct ChargeFeedback_
{
  typedef ChargeFeedback_<ContainerAllocator> Type;

  ChargeFeedback_()
    : status()  {
    }
  ChargeFeedback_(const ContainerAllocator& _alloc)
    : status(_alloc)  {
  (void)_alloc;
    }



   typedef  ::xnergy_charger_rcu::ChargerState_<ContainerAllocator>  _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::xnergy_charger_rcu::ChargeFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::xnergy_charger_rcu::ChargeFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct ChargeFeedback_

typedef ::xnergy_charger_rcu::ChargeFeedback_<std::allocator<void> > ChargeFeedback;

typedef boost::shared_ptr< ::xnergy_charger_rcu::ChargeFeedback > ChargeFeedbackPtr;
typedef boost::shared_ptr< ::xnergy_charger_rcu::ChargeFeedback const> ChargeFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::xnergy_charger_rcu::ChargeFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::xnergy_charger_rcu::ChargeFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::xnergy_charger_rcu::ChargeFeedback_<ContainerAllocator1> & lhs, const ::xnergy_charger_rcu::ChargeFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::xnergy_charger_rcu::ChargeFeedback_<ContainerAllocator1> & lhs, const ::xnergy_charger_rcu::ChargeFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace xnergy_charger_rcu

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::xnergy_charger_rcu::ChargeFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::xnergy_charger_rcu::ChargeFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xnergy_charger_rcu::ChargeFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::xnergy_charger_rcu::ChargeFeedback_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xnergy_charger_rcu::ChargeFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::xnergy_charger_rcu::ChargeFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::xnergy_charger_rcu::ChargeFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "109992c8e1dfc8ecd7be76c615ba4d7f";
  }

  static const char* value(const ::xnergy_charger_rcu::ChargeFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x109992c8e1dfc8ecULL;
  static const uint64_t static_value2 = 0xd7be76c615ba4d7fULL;
};

template<class ContainerAllocator>
struct DataType< ::xnergy_charger_rcu::ChargeFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "xnergy_charger_rcu/ChargeFeedback";
  }

  static const char* value(const ::xnergy_charger_rcu::ChargeFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::xnergy_charger_rcu::ChargeFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"## Feedback Definition\n"
"ChargerState status\n"
"\n"
"================================================================================\n"
"MSG: xnergy_charger_rcu/ChargerState\n"
"int16 RCU_NOT_CONNECTED = 250\n"
"\n"
"int16 RCU_IDLE = 0\n"
"\n"
"int16 RCU_RESERVE_0 = 1\n"
"\n"
"int16 RCU_HANDSHAKE_0 = 2\n"
"int16 RCU_HANDSHAKE_1 = 3\n"
"int16 RCU_HANDSHAKE_2 = 4\n"
"\n"
"int16 RCU_CHARGING = 5\n"
"int16 RCU_STOP = 6\n"
"\n"
"int16 RCU_RESERVE_1 = 7\n"
"int16 RCU_RESERVE_2 = 240\n"
"int16 RCU_ERROR = 238\n"
"\n"
"Header header\n"
"int16 state\n"
"string message\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::xnergy_charger_rcu::ChargeFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::xnergy_charger_rcu::ChargeFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChargeFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::xnergy_charger_rcu::ChargeFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::xnergy_charger_rcu::ChargeFeedback_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    s << std::endl;
    Printer< ::xnergy_charger_rcu::ChargerState_<ContainerAllocator> >::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // XNERGY_CHARGER_RCU_MESSAGE_CHARGEFEEDBACK_H
