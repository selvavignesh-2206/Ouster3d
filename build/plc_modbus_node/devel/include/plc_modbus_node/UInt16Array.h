// Generated by gencpp from file plc_modbus_node/UInt16Array.msg
// DO NOT EDIT!


#ifndef PLC_MODBUS_NODE_MESSAGE_UINT16ARRAY_H
#define PLC_MODBUS_NODE_MESSAGE_UINT16ARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace plc_modbus_node
{
template <class ContainerAllocator>
struct UInt16Array_
{
  typedef UInt16Array_<ContainerAllocator> Type;

  UInt16Array_()
    : name()
    , data()  {
    }
  UInt16Array_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::plc_modbus_node::UInt16Array_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plc_modbus_node::UInt16Array_<ContainerAllocator> const> ConstPtr;

}; // struct UInt16Array_

typedef ::plc_modbus_node::UInt16Array_<std::allocator<void> > UInt16Array;

typedef boost::shared_ptr< ::plc_modbus_node::UInt16Array > UInt16ArrayPtr;
typedef boost::shared_ptr< ::plc_modbus_node::UInt16Array const> UInt16ArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plc_modbus_node::UInt16Array_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plc_modbus_node::UInt16Array_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::plc_modbus_node::UInt16Array_<ContainerAllocator1> & lhs, const ::plc_modbus_node::UInt16Array_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::plc_modbus_node::UInt16Array_<ContainerAllocator1> & lhs, const ::plc_modbus_node::UInt16Array_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace plc_modbus_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::plc_modbus_node::UInt16Array_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plc_modbus_node::UInt16Array_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plc_modbus_node::UInt16Array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plc_modbus_node::UInt16Array_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plc_modbus_node::UInt16Array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plc_modbus_node::UInt16Array_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plc_modbus_node::UInt16Array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "66213e4f7651547d89c004d7d8274537";
  }

  static const char* value(const ::plc_modbus_node::UInt16Array_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x66213e4f7651547dULL;
  static const uint64_t static_value2 = 0x89c004d7d8274537ULL;
};

template<class ContainerAllocator>
struct DataType< ::plc_modbus_node::UInt16Array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plc_modbus_node/UInt16Array";
  }

  static const char* value(const ::plc_modbus_node::UInt16Array_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plc_modbus_node::UInt16Array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"uint16[] data\n"
;
  }

  static const char* value(const ::plc_modbus_node::UInt16Array_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plc_modbus_node::UInt16Array_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UInt16Array_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plc_modbus_node::UInt16Array_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plc_modbus_node::UInt16Array_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLC_MODBUS_NODE_MESSAGE_UINT16ARRAY_H
