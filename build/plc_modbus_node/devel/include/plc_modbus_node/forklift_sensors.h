// Generated by gencpp from file plc_modbus_node/forklift_sensors.msg
// DO NOT EDIT!


#ifndef PLC_MODBUS_NODE_MESSAGE_FORKLIFT_SENSORS_H
#define PLC_MODBUS_NODE_MESSAGE_FORKLIFT_SENSORS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace plc_modbus_node
{
template <class ContainerAllocator>
struct forklift_sensors_
{
  typedef forklift_sensors_<ContainerAllocator> Type;

  forklift_sensors_()
    : lift_cmd(0)
    , ir_cmd(0)
    , ir_dist_left(0)
    , ir_dist_right(0)
    , angle(0.0)
    , mount_status(false)
    , alignment(false)
    , busy_status(false)  {
    }
  forklift_sensors_(const ContainerAllocator& _alloc)
    : lift_cmd(0)
    , ir_cmd(0)
    , ir_dist_left(0)
    , ir_dist_right(0)
    , angle(0.0)
    , mount_status(false)
    , alignment(false)
    , busy_status(false)  {
  (void)_alloc;
    }



   typedef uint16_t _lift_cmd_type;
  _lift_cmd_type lift_cmd;

   typedef uint16_t _ir_cmd_type;
  _ir_cmd_type ir_cmd;

   typedef uint16_t _ir_dist_left_type;
  _ir_dist_left_type ir_dist_left;

   typedef uint16_t _ir_dist_right_type;
  _ir_dist_right_type ir_dist_right;

   typedef float _angle_type;
  _angle_type angle;

   typedef uint8_t _mount_status_type;
  _mount_status_type mount_status;

   typedef uint8_t _alignment_type;
  _alignment_type alignment;

   typedef uint8_t _busy_status_type;
  _busy_status_type busy_status;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(CMD_LIFT_UP)
  #undef CMD_LIFT_UP
#endif
#if defined(_WIN32) && defined(CMD_LIFT_DOWN)
  #undef CMD_LIFT_DOWN
#endif
#if defined(_WIN32) && defined(CMD_NO_LIFT)
  #undef CMD_NO_LIFT
#endif
#if defined(_WIN32) && defined(CMD_IR)
  #undef CMD_IR
#endif
#if defined(_WIN32) && defined(CMD_NO_IR)
  #undef CMD_NO_IR
#endif

  enum {
    CMD_LIFT_UP = 1u,
    CMD_LIFT_DOWN = 2u,
    CMD_NO_LIFT = 0u,
    CMD_IR = 1u,
    CMD_NO_IR = 0u,
  };


  typedef boost::shared_ptr< ::plc_modbus_node::forklift_sensors_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plc_modbus_node::forklift_sensors_<ContainerAllocator> const> ConstPtr;

}; // struct forklift_sensors_

typedef ::plc_modbus_node::forklift_sensors_<std::allocator<void> > forklift_sensors;

typedef boost::shared_ptr< ::plc_modbus_node::forklift_sensors > forklift_sensorsPtr;
typedef boost::shared_ptr< ::plc_modbus_node::forklift_sensors const> forklift_sensorsConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plc_modbus_node::forklift_sensors_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plc_modbus_node::forklift_sensors_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::plc_modbus_node::forklift_sensors_<ContainerAllocator1> & lhs, const ::plc_modbus_node::forklift_sensors_<ContainerAllocator2> & rhs)
{
  return lhs.lift_cmd == rhs.lift_cmd &&
    lhs.ir_cmd == rhs.ir_cmd &&
    lhs.ir_dist_left == rhs.ir_dist_left &&
    lhs.ir_dist_right == rhs.ir_dist_right &&
    lhs.angle == rhs.angle &&
    lhs.mount_status == rhs.mount_status &&
    lhs.alignment == rhs.alignment &&
    lhs.busy_status == rhs.busy_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::plc_modbus_node::forklift_sensors_<ContainerAllocator1> & lhs, const ::plc_modbus_node::forklift_sensors_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace plc_modbus_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::plc_modbus_node::forklift_sensors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plc_modbus_node::forklift_sensors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plc_modbus_node::forklift_sensors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plc_modbus_node::forklift_sensors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plc_modbus_node::forklift_sensors_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plc_modbus_node::forklift_sensors_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plc_modbus_node::forklift_sensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cbb8c3ab4ef54c089ed9544242eb5020";
  }

  static const char* value(const ::plc_modbus_node::forklift_sensors_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcbb8c3ab4ef54c08ULL;
  static const uint64_t static_value2 = 0x9ed9544242eb5020ULL;
};

template<class ContainerAllocator>
struct DataType< ::plc_modbus_node::forklift_sensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plc_modbus_node/forklift_sensors";
  }

  static const char* value(const ::plc_modbus_node::forklift_sensors_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plc_modbus_node::forklift_sensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Constant values for lift arm commands\n"
"uint16 CMD_LIFT_UP=1\n"
"uint16 CMD_LIFT_DOWN=2\n"
"uint16 CMD_NO_LIFT=0\n"
"uint16 CMD_IR=1\n"
"uint16 CMD_NO_IR=0\n"
"\n"
"# Variables\n"
"uint16 lift_cmd\n"
"uint16 ir_cmd\n"
"uint16 ir_dist_left\n"
"uint16 ir_dist_right \n"
"float32 angle\n"
"bool mount_status\n"
"bool alignment\n"
"bool busy_status\n"
;
  }

  static const char* value(const ::plc_modbus_node::forklift_sensors_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plc_modbus_node::forklift_sensors_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lift_cmd);
      stream.next(m.ir_cmd);
      stream.next(m.ir_dist_left);
      stream.next(m.ir_dist_right);
      stream.next(m.angle);
      stream.next(m.mount_status);
      stream.next(m.alignment);
      stream.next(m.busy_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct forklift_sensors_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plc_modbus_node::forklift_sensors_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plc_modbus_node::forklift_sensors_<ContainerAllocator>& v)
  {
    s << indent << "lift_cmd: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.lift_cmd);
    s << indent << "ir_cmd: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ir_cmd);
    s << indent << "ir_dist_left: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ir_dist_left);
    s << indent << "ir_dist_right: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ir_dist_right);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
    s << indent << "mount_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mount_status);
    s << indent << "alignment: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.alignment);
    s << indent << "busy_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.busy_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLC_MODBUS_NODE_MESSAGE_FORKLIFT_SENSORS_H
