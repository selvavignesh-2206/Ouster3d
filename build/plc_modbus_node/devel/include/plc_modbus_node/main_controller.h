// Generated by gencpp from file plc_modbus_node/main_controller.msg
// DO NOT EDIT!


#ifndef PLC_MODBUS_NODE_MESSAGE_MAIN_CONTROLLER_H
#define PLC_MODBUS_NODE_MESSAGE_MAIN_CONTROLLER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace plc_modbus_node
{
template <class ContainerAllocator>
struct main_controller_
{
  typedef main_controller_<ContainerAllocator> Type;

  main_controller_()
    : heartbeat(false)
    , estop_status(false)
    , twentyfour_volt_measure(0.0)
    , nineteen_volt_measure(0.0)
    , twelve_volt_measure(0.0)  {
    }
  main_controller_(const ContainerAllocator& _alloc)
    : heartbeat(false)
    , estop_status(false)
    , twentyfour_volt_measure(0.0)
    , nineteen_volt_measure(0.0)
    , twelve_volt_measure(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _heartbeat_type;
  _heartbeat_type heartbeat;

   typedef uint8_t _estop_status_type;
  _estop_status_type estop_status;

   typedef float _twentyfour_volt_measure_type;
  _twentyfour_volt_measure_type twentyfour_volt_measure;

   typedef float _nineteen_volt_measure_type;
  _nineteen_volt_measure_type nineteen_volt_measure;

   typedef float _twelve_volt_measure_type;
  _twelve_volt_measure_type twelve_volt_measure;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(A_ESTOP)
  #undef A_ESTOP
#endif
#if defined(_WIN32) && defined(D_ESTOP)
  #undef D_ESTOP
#endif

  enum {
    A_ESTOP = 1,
    D_ESTOP = 0,
  };


  typedef boost::shared_ptr< ::plc_modbus_node::main_controller_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plc_modbus_node::main_controller_<ContainerAllocator> const> ConstPtr;

}; // struct main_controller_

typedef ::plc_modbus_node::main_controller_<std::allocator<void> > main_controller;

typedef boost::shared_ptr< ::plc_modbus_node::main_controller > main_controllerPtr;
typedef boost::shared_ptr< ::plc_modbus_node::main_controller const> main_controllerConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plc_modbus_node::main_controller_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plc_modbus_node::main_controller_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::plc_modbus_node::main_controller_<ContainerAllocator1> & lhs, const ::plc_modbus_node::main_controller_<ContainerAllocator2> & rhs)
{
  return lhs.heartbeat == rhs.heartbeat &&
    lhs.estop_status == rhs.estop_status &&
    lhs.twentyfour_volt_measure == rhs.twentyfour_volt_measure &&
    lhs.nineteen_volt_measure == rhs.nineteen_volt_measure &&
    lhs.twelve_volt_measure == rhs.twelve_volt_measure;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::plc_modbus_node::main_controller_<ContainerAllocator1> & lhs, const ::plc_modbus_node::main_controller_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace plc_modbus_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::plc_modbus_node::main_controller_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plc_modbus_node::main_controller_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plc_modbus_node::main_controller_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plc_modbus_node::main_controller_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plc_modbus_node::main_controller_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plc_modbus_node::main_controller_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plc_modbus_node::main_controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "594bbcfeb36caa9a50af8f12de95053e";
  }

  static const char* value(const ::plc_modbus_node::main_controller_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x594bbcfeb36caa9aULL;
  static const uint64_t static_value2 = 0x50af8f12de95053eULL;
};

template<class ContainerAllocator>
struct DataType< ::plc_modbus_node::main_controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plc_modbus_node/main_controller";
  }

  static const char* value(const ::plc_modbus_node::main_controller_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plc_modbus_node::main_controller_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Constant value for estop command\n"
"int16 A_ESTOP = 1  # A --> ACTIVATE\n"
"int16 D_ESTOP = 0  # B --> DEACTIVATE\n"
"\n"
"# Variables\n"
"bool heartbeat\n"
"bool estop_status\n"
"\n"
"float32 twentyfour_volt_measure\n"
"float32 nineteen_volt_measure\n"
"float32 twelve_volt_measure\n"
;
  }

  static const char* value(const ::plc_modbus_node::main_controller_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plc_modbus_node::main_controller_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.heartbeat);
      stream.next(m.estop_status);
      stream.next(m.twentyfour_volt_measure);
      stream.next(m.nineteen_volt_measure);
      stream.next(m.twelve_volt_measure);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct main_controller_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plc_modbus_node::main_controller_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plc_modbus_node::main_controller_<ContainerAllocator>& v)
  {
    s << indent << "heartbeat: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.heartbeat);
    s << indent << "estop_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.estop_status);
    s << indent << "twentyfour_volt_measure: ";
    Printer<float>::stream(s, indent + "  ", v.twentyfour_volt_measure);
    s << indent << "nineteen_volt_measure: ";
    Printer<float>::stream(s, indent + "  ", v.nineteen_volt_measure);
    s << indent << "twelve_volt_measure: ";
    Printer<float>::stream(s, indent + "  ", v.twelve_volt_measure);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLC_MODBUS_NODE_MESSAGE_MAIN_CONTROLLER_H
