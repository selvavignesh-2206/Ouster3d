// Generated by gencpp from file plc_modbus_node/xnergy_sensors.msg
// DO NOT EDIT!


#ifndef PLC_MODBUS_NODE_MESSAGE_XNERGY_SENSORS_H
#define PLC_MODBUS_NODE_MESSAGE_XNERGY_SENSORS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace plc_modbus_node
{
template <class ContainerAllocator>
struct xnergy_sensors_
{
  typedef xnergy_sensors_<ContainerAllocator> Type;

  xnergy_sensors_()
    : xnergy_runtime_voltage(0.0)
    , xnergy_runtime_current(0.0)
    , rcu_temp(0)
    , batt_output_current(0.0)
    , battery_volt(0.0)
    , error_code(0)
    , toggle_state(false)
    , charge_state(false)  {
    }
  xnergy_sensors_(const ContainerAllocator& _alloc)
    : xnergy_runtime_voltage(0.0)
    , xnergy_runtime_current(0.0)
    , rcu_temp(0)
    , batt_output_current(0.0)
    , battery_volt(0.0)
    , error_code(0)
    , toggle_state(false)
    , charge_state(false)  {
  (void)_alloc;
    }



   typedef float _xnergy_runtime_voltage_type;
  _xnergy_runtime_voltage_type xnergy_runtime_voltage;

   typedef float _xnergy_runtime_current_type;
  _xnergy_runtime_current_type xnergy_runtime_current;

   typedef uint16_t _rcu_temp_type;
  _rcu_temp_type rcu_temp;

   typedef float _batt_output_current_type;
  _batt_output_current_type batt_output_current;

   typedef float _battery_volt_type;
  _battery_volt_type battery_volt;

   typedef uint16_t _error_code_type;
  _error_code_type error_code;

   typedef uint8_t _toggle_state_type;
  _toggle_state_type toggle_state;

   typedef uint8_t _charge_state_type;
  _charge_state_type charge_state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(toggle)
  #undef toggle
#endif
#if defined(_WIN32) && defined(START_CHARGE)
  #undef START_CHARGE
#endif
#if defined(_WIN32) && defined(STOP_CHARGE)
  #undef STOP_CHARGE
#endif

  enum {
    toggle = 1u,
    START_CHARGE = 1u,
    STOP_CHARGE = 0u,
  };


  typedef boost::shared_ptr< ::plc_modbus_node::xnergy_sensors_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plc_modbus_node::xnergy_sensors_<ContainerAllocator> const> ConstPtr;

}; // struct xnergy_sensors_

typedef ::plc_modbus_node::xnergy_sensors_<std::allocator<void> > xnergy_sensors;

typedef boost::shared_ptr< ::plc_modbus_node::xnergy_sensors > xnergy_sensorsPtr;
typedef boost::shared_ptr< ::plc_modbus_node::xnergy_sensors const> xnergy_sensorsConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plc_modbus_node::xnergy_sensors_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plc_modbus_node::xnergy_sensors_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::plc_modbus_node::xnergy_sensors_<ContainerAllocator1> & lhs, const ::plc_modbus_node::xnergy_sensors_<ContainerAllocator2> & rhs)
{
  return lhs.xnergy_runtime_voltage == rhs.xnergy_runtime_voltage &&
    lhs.xnergy_runtime_current == rhs.xnergy_runtime_current &&
    lhs.rcu_temp == rhs.rcu_temp &&
    lhs.batt_output_current == rhs.batt_output_current &&
    lhs.battery_volt == rhs.battery_volt &&
    lhs.error_code == rhs.error_code &&
    lhs.toggle_state == rhs.toggle_state &&
    lhs.charge_state == rhs.charge_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::plc_modbus_node::xnergy_sensors_<ContainerAllocator1> & lhs, const ::plc_modbus_node::xnergy_sensors_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace plc_modbus_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::plc_modbus_node::xnergy_sensors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plc_modbus_node::xnergy_sensors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plc_modbus_node::xnergy_sensors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plc_modbus_node::xnergy_sensors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plc_modbus_node::xnergy_sensors_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plc_modbus_node::xnergy_sensors_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plc_modbus_node::xnergy_sensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2fa4cf11026a661070b144e46e0f066b";
  }

  static const char* value(const ::plc_modbus_node::xnergy_sensors_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2fa4cf11026a6610ULL;
  static const uint64_t static_value2 = 0x70b144e46e0f066bULL;
};

template<class ContainerAllocator>
struct DataType< ::plc_modbus_node::xnergy_sensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plc_modbus_node/xnergy_sensors";
  }

  static const char* value(const ::plc_modbus_node::xnergy_sensors_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plc_modbus_node::xnergy_sensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Constant values for lift arm commands\n"
"uint16 toggle= 1\n"
"uint16 START_CHARGE= 1\n"
"uint16 STOP_CHARGE = 0\n"
"\n"
"# variables\n"
"float32 xnergy_runtime_voltage \n"
"float32 xnergy_runtime_current\n"
"uint16 rcu_temp\n"
"float32 batt_output_current\n"
"float32 battery_volt\n"
"uint16 error_code\n"
"bool toggle_state # true= toggle state on thus can modify charging state , false= toggle state is off\n"
"bool charge_state # true= charging, false=not charging\n"
;
  }

  static const char* value(const ::plc_modbus_node::xnergy_sensors_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plc_modbus_node::xnergy_sensors_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.xnergy_runtime_voltage);
      stream.next(m.xnergy_runtime_current);
      stream.next(m.rcu_temp);
      stream.next(m.batt_output_current);
      stream.next(m.battery_volt);
      stream.next(m.error_code);
      stream.next(m.toggle_state);
      stream.next(m.charge_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct xnergy_sensors_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plc_modbus_node::xnergy_sensors_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plc_modbus_node::xnergy_sensors_<ContainerAllocator>& v)
  {
    s << indent << "xnergy_runtime_voltage: ";
    Printer<float>::stream(s, indent + "  ", v.xnergy_runtime_voltage);
    s << indent << "xnergy_runtime_current: ";
    Printer<float>::stream(s, indent + "  ", v.xnergy_runtime_current);
    s << indent << "rcu_temp: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.rcu_temp);
    s << indent << "batt_output_current: ";
    Printer<float>::stream(s, indent + "  ", v.batt_output_current);
    s << indent << "battery_volt: ";
    Printer<float>::stream(s, indent + "  ", v.battery_volt);
    s << indent << "error_code: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.error_code);
    s << indent << "toggle_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.toggle_state);
    s << indent << "charge_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.charge_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLC_MODBUS_NODE_MESSAGE_XNERGY_SENSORS_H
