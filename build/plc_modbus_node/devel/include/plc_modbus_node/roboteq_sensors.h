// Generated by gencpp from file plc_modbus_node/roboteq_sensors.msg
// DO NOT EDIT!


#ifndef PLC_MODBUS_NODE_MESSAGE_ROBOTEQ_SENSORS_H
#define PLC_MODBUS_NODE_MESSAGE_ROBOTEQ_SENSORS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace plc_modbus_node
{
template <class ContainerAllocator>
struct roboteq_sensors_
{
  typedef roboteq_sensors_<ContainerAllocator> Type;

  roboteq_sensors_()
    : speed_left(0)
    , speed_right(0)
    , encoder_left(0)
    , encoder_right(0)
    , amps_left(0.0)
    , amps_right(0.0)
    , volts_batt(0.0)
    , fault_flag()
    , refresh_rate(0)
    , time_elapsed(0)  {
    }
  roboteq_sensors_(const ContainerAllocator& _alloc)
    : speed_left(0)
    , speed_right(0)
    , encoder_left(0)
    , encoder_right(0)
    , amps_left(0.0)
    , amps_right(0.0)
    , volts_batt(0.0)
    , fault_flag(_alloc)
    , refresh_rate(0)
    , time_elapsed(0)  {
  (void)_alloc;
    }



   typedef int32_t _speed_left_type;
  _speed_left_type speed_left;

   typedef int32_t _speed_right_type;
  _speed_right_type speed_right;

   typedef uint32_t _encoder_left_type;
  _encoder_left_type encoder_left;

   typedef uint32_t _encoder_right_type;
  _encoder_right_type encoder_right;

   typedef float _amps_left_type;
  _amps_left_type amps_left;

   typedef float _amps_right_type;
  _amps_right_type amps_right;

   typedef float _volts_batt_type;
  _volts_batt_type volts_batt;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _fault_flag_type;
  _fault_flag_type fault_flag;

   typedef uint16_t _refresh_rate_type;
  _refresh_rate_type refresh_rate;

   typedef uint16_t _time_elapsed_type;
  _time_elapsed_type time_elapsed;





  typedef boost::shared_ptr< ::plc_modbus_node::roboteq_sensors_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::plc_modbus_node::roboteq_sensors_<ContainerAllocator> const> ConstPtr;

}; // struct roboteq_sensors_

typedef ::plc_modbus_node::roboteq_sensors_<std::allocator<void> > roboteq_sensors;

typedef boost::shared_ptr< ::plc_modbus_node::roboteq_sensors > roboteq_sensorsPtr;
typedef boost::shared_ptr< ::plc_modbus_node::roboteq_sensors const> roboteq_sensorsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::plc_modbus_node::roboteq_sensors_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::plc_modbus_node::roboteq_sensors_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::plc_modbus_node::roboteq_sensors_<ContainerAllocator1> & lhs, const ::plc_modbus_node::roboteq_sensors_<ContainerAllocator2> & rhs)
{
  return lhs.speed_left == rhs.speed_left &&
    lhs.speed_right == rhs.speed_right &&
    lhs.encoder_left == rhs.encoder_left &&
    lhs.encoder_right == rhs.encoder_right &&
    lhs.amps_left == rhs.amps_left &&
    lhs.amps_right == rhs.amps_right &&
    lhs.volts_batt == rhs.volts_batt &&
    lhs.fault_flag == rhs.fault_flag &&
    lhs.refresh_rate == rhs.refresh_rate &&
    lhs.time_elapsed == rhs.time_elapsed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::plc_modbus_node::roboteq_sensors_<ContainerAllocator1> & lhs, const ::plc_modbus_node::roboteq_sensors_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace plc_modbus_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::plc_modbus_node::roboteq_sensors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::plc_modbus_node::roboteq_sensors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plc_modbus_node::roboteq_sensors_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::plc_modbus_node::roboteq_sensors_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plc_modbus_node::roboteq_sensors_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::plc_modbus_node::roboteq_sensors_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::plc_modbus_node::roboteq_sensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "606f1c09375b9956f0c561c460b7d996";
  }

  static const char* value(const ::plc_modbus_node::roboteq_sensors_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x606f1c09375b9956ULL;
  static const uint64_t static_value2 = 0xf0c561c460b7d996ULL;
};

template<class ContainerAllocator>
struct DataType< ::plc_modbus_node::roboteq_sensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "plc_modbus_node/roboteq_sensors";
  }

  static const char* value(const ::plc_modbus_node::roboteq_sensors_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::plc_modbus_node::roboteq_sensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 speed_left\n"
"int32 speed_right\n"
"uint32 encoder_left\n"
"uint32 encoder_right\n"
"float32 amps_left \n"
"float32 amps_right\n"
"float32 volts_batt\n"
"string fault_flag\n"
"uint16 refresh_rate\n"
"uint16 time_elapsed\n"
;
  }

  static const char* value(const ::plc_modbus_node::roboteq_sensors_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::plc_modbus_node::roboteq_sensors_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed_left);
      stream.next(m.speed_right);
      stream.next(m.encoder_left);
      stream.next(m.encoder_right);
      stream.next(m.amps_left);
      stream.next(m.amps_right);
      stream.next(m.volts_batt);
      stream.next(m.fault_flag);
      stream.next(m.refresh_rate);
      stream.next(m.time_elapsed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct roboteq_sensors_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::plc_modbus_node::roboteq_sensors_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::plc_modbus_node::roboteq_sensors_<ContainerAllocator>& v)
  {
    s << indent << "speed_left: ";
    Printer<int32_t>::stream(s, indent + "  ", v.speed_left);
    s << indent << "speed_right: ";
    Printer<int32_t>::stream(s, indent + "  ", v.speed_right);
    s << indent << "encoder_left: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.encoder_left);
    s << indent << "encoder_right: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.encoder_right);
    s << indent << "amps_left: ";
    Printer<float>::stream(s, indent + "  ", v.amps_left);
    s << indent << "amps_right: ";
    Printer<float>::stream(s, indent + "  ", v.amps_right);
    s << indent << "volts_batt: ";
    Printer<float>::stream(s, indent + "  ", v.volts_batt);
    s << indent << "fault_flag: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.fault_flag);
    s << indent << "refresh_rate: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.refresh_rate);
    s << indent << "time_elapsed: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.time_elapsed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLC_MODBUS_NODE_MESSAGE_ROBOTEQ_SENSORS_H
