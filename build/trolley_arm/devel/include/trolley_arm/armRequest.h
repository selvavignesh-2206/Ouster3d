// Generated by gencpp from file trolley_arm/armRequest.msg
// DO NOT EDIT!


#ifndef TROLLEY_ARM_MESSAGE_ARMREQUEST_H
#define TROLLEY_ARM_MESSAGE_ARMREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace trolley_arm
{
template <class ContainerAllocator>
struct armRequest_
{
  typedef armRequest_<ContainerAllocator> Type;

  armRequest_()
    : arm_request(0)  {
    }
  armRequest_(const ContainerAllocator& _alloc)
    : arm_request(0)  {
  (void)_alloc;
    }



   typedef int64_t _arm_request_type;
  _arm_request_type arm_request;





  typedef boost::shared_ptr< ::trolley_arm::armRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::trolley_arm::armRequest_<ContainerAllocator> const> ConstPtr;

}; // struct armRequest_

typedef ::trolley_arm::armRequest_<std::allocator<void> > armRequest;

typedef boost::shared_ptr< ::trolley_arm::armRequest > armRequestPtr;
typedef boost::shared_ptr< ::trolley_arm::armRequest const> armRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::trolley_arm::armRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::trolley_arm::armRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::trolley_arm::armRequest_<ContainerAllocator1> & lhs, const ::trolley_arm::armRequest_<ContainerAllocator2> & rhs)
{
  return lhs.arm_request == rhs.arm_request;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::trolley_arm::armRequest_<ContainerAllocator1> & lhs, const ::trolley_arm::armRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace trolley_arm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::trolley_arm::armRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trolley_arm::armRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::trolley_arm::armRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::trolley_arm::armRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trolley_arm::armRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trolley_arm::armRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::trolley_arm::armRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "245777174e38c7332a8d16340eaff38f";
  }

  static const char* value(const ::trolley_arm::armRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x245777174e38c733ULL;
  static const uint64_t static_value2 = 0x2a8d16340eaff38fULL;
};

template<class ContainerAllocator>
struct DataType< ::trolley_arm::armRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "trolley_arm/armRequest";
  }

  static const char* value(const ::trolley_arm::armRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::trolley_arm::armRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 arm_request\n"
;
  }

  static const char* value(const ::trolley_arm::armRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::trolley_arm::armRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.arm_request);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct armRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::trolley_arm::armRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::trolley_arm::armRequest_<ContainerAllocator>& v)
  {
    s << indent << "arm_request: ";
    Printer<int64_t>::stream(s, indent + "  ", v.arm_request);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TROLLEY_ARM_MESSAGE_ARMREQUEST_H
