// Generated by gencpp from file trolley_arm/armResponse.msg
// DO NOT EDIT!


#ifndef TROLLEY_ARM_MESSAGE_ARMRESPONSE_H
#define TROLLEY_ARM_MESSAGE_ARMRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace trolley_arm
{
template <class ContainerAllocator>
struct armResponse_
{
  typedef armResponse_<ContainerAllocator> Type;

  armResponse_()
    : arm_position(0)
    , arm_moving_state(0)  {
    }
  armResponse_(const ContainerAllocator& _alloc)
    : arm_position(0)
    , arm_moving_state(0)  {
  (void)_alloc;
    }



   typedef int64_t _arm_position_type;
  _arm_position_type arm_position;

   typedef int64_t _arm_moving_state_type;
  _arm_moving_state_type arm_moving_state;





  typedef boost::shared_ptr< ::trolley_arm::armResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::trolley_arm::armResponse_<ContainerAllocator> const> ConstPtr;

}; // struct armResponse_

typedef ::trolley_arm::armResponse_<std::allocator<void> > armResponse;

typedef boost::shared_ptr< ::trolley_arm::armResponse > armResponsePtr;
typedef boost::shared_ptr< ::trolley_arm::armResponse const> armResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::trolley_arm::armResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::trolley_arm::armResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::trolley_arm::armResponse_<ContainerAllocator1> & lhs, const ::trolley_arm::armResponse_<ContainerAllocator2> & rhs)
{
  return lhs.arm_position == rhs.arm_position &&
    lhs.arm_moving_state == rhs.arm_moving_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::trolley_arm::armResponse_<ContainerAllocator1> & lhs, const ::trolley_arm::armResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace trolley_arm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::trolley_arm::armResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trolley_arm::armResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::trolley_arm::armResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::trolley_arm::armResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trolley_arm::armResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trolley_arm::armResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::trolley_arm::armResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e6df8f7658af6f1bda0abc87c276ee82";
  }

  static const char* value(const ::trolley_arm::armResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe6df8f7658af6f1bULL;
  static const uint64_t static_value2 = 0xda0abc87c276ee82ULL;
};

template<class ContainerAllocator>
struct DataType< ::trolley_arm::armResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "trolley_arm/armResponse";
  }

  static const char* value(const ::trolley_arm::armResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::trolley_arm::armResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 arm_position\n"
"int64 arm_moving_state\n"
;
  }

  static const char* value(const ::trolley_arm::armResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::trolley_arm::armResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.arm_position);
      stream.next(m.arm_moving_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct armResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::trolley_arm::armResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::trolley_arm::armResponse_<ContainerAllocator>& v)
  {
    s << indent << "arm_position: ";
    Printer<int64_t>::stream(s, indent + "  ", v.arm_position);
    s << indent << "arm_moving_state: ";
    Printer<int64_t>::stream(s, indent + "  ", v.arm_moving_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TROLLEY_ARM_MESSAGE_ARMRESPONSE_H
