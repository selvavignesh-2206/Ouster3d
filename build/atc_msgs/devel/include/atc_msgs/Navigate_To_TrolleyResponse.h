// Generated by gencpp from file atc_msgs/Navigate_To_TrolleyResponse.msg
// DO NOT EDIT!


#ifndef ATC_MSGS_MESSAGE_NAVIGATE_TO_TROLLEYRESPONSE_H
#define ATC_MSGS_MESSAGE_NAVIGATE_TO_TROLLEYRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace atc_msgs
{
template <class ContainerAllocator>
struct Navigate_To_TrolleyResponse_
{
  typedef Navigate_To_TrolleyResponse_<ContainerAllocator> Type;

  Navigate_To_TrolleyResponse_()
    : movement_mode(0)
    , agv_state(0)
    , status_message()
    , detector_message()  {
    }
  Navigate_To_TrolleyResponse_(const ContainerAllocator& _alloc)
    : movement_mode(0)
    , agv_state(0)
    , status_message(_alloc)
    , detector_message(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _movement_mode_type;
  _movement_mode_type movement_mode;

   typedef int8_t _agv_state_type;
  _agv_state_type agv_state;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _status_message_type;
  _status_message_type status_message;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _detector_message_type;
  _detector_message_type detector_message;





  typedef boost::shared_ptr< ::atc_msgs::Navigate_To_TrolleyResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atc_msgs::Navigate_To_TrolleyResponse_<ContainerAllocator> const> ConstPtr;

}; // struct Navigate_To_TrolleyResponse_

typedef ::atc_msgs::Navigate_To_TrolleyResponse_<std::allocator<void> > Navigate_To_TrolleyResponse;

typedef boost::shared_ptr< ::atc_msgs::Navigate_To_TrolleyResponse > Navigate_To_TrolleyResponsePtr;
typedef boost::shared_ptr< ::atc_msgs::Navigate_To_TrolleyResponse const> Navigate_To_TrolleyResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::atc_msgs::Navigate_To_TrolleyResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::atc_msgs::Navigate_To_TrolleyResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::atc_msgs::Navigate_To_TrolleyResponse_<ContainerAllocator1> & lhs, const ::atc_msgs::Navigate_To_TrolleyResponse_<ContainerAllocator2> & rhs)
{
  return lhs.movement_mode == rhs.movement_mode &&
    lhs.agv_state == rhs.agv_state &&
    lhs.status_message == rhs.status_message &&
    lhs.detector_message == rhs.detector_message;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::atc_msgs::Navigate_To_TrolleyResponse_<ContainerAllocator1> & lhs, const ::atc_msgs::Navigate_To_TrolleyResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace atc_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::atc_msgs::Navigate_To_TrolleyResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::atc_msgs::Navigate_To_TrolleyResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::atc_msgs::Navigate_To_TrolleyResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::atc_msgs::Navigate_To_TrolleyResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atc_msgs::Navigate_To_TrolleyResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atc_msgs::Navigate_To_TrolleyResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::atc_msgs::Navigate_To_TrolleyResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "07f45e069330ee99a595590268bd926e";
  }

  static const char* value(const ::atc_msgs::Navigate_To_TrolleyResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x07f45e069330ee99ULL;
  static const uint64_t static_value2 = 0xa595590268bd926eULL;
};

template<class ContainerAllocator>
struct DataType< ::atc_msgs::Navigate_To_TrolleyResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "atc_msgs/Navigate_To_TrolleyResponse";
  }

  static const char* value(const ::atc_msgs::Navigate_To_TrolleyResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::atc_msgs::Navigate_To_TrolleyResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Response fields\n"
"int8 movement_mode\n"
"int8 agv_state\n"
"string status_message\n"
"string detector_message\n"
"\n"
"\n"
;
  }

  static const char* value(const ::atc_msgs::Navigate_To_TrolleyResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::atc_msgs::Navigate_To_TrolleyResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.movement_mode);
      stream.next(m.agv_state);
      stream.next(m.status_message);
      stream.next(m.detector_message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Navigate_To_TrolleyResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::atc_msgs::Navigate_To_TrolleyResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::atc_msgs::Navigate_To_TrolleyResponse_<ContainerAllocator>& v)
  {
    s << indent << "movement_mode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.movement_mode);
    s << indent << "agv_state: ";
    Printer<int8_t>::stream(s, indent + "  ", v.agv_state);
    s << indent << "status_message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.status_message);
    s << indent << "detector_message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.detector_message);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ATC_MSGS_MESSAGE_NAVIGATE_TO_TROLLEYRESPONSE_H
