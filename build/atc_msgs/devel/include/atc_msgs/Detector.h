// Generated by gencpp from file atc_msgs/Detector.msg
// DO NOT EDIT!


#ifndef ATC_MSGS_MESSAGE_DETECTOR_H
#define ATC_MSGS_MESSAGE_DETECTOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <atc_msgs/BoundingBox.h>

namespace atc_msgs
{
template <class ContainerAllocator>
struct Detector_
{
  typedef Detector_<ContainerAllocator> Type;

  Detector_()
    : boxes()  {
    }
  Detector_(const ContainerAllocator& _alloc)
    : boxes(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::atc_msgs::BoundingBox_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::atc_msgs::BoundingBox_<ContainerAllocator> >::other >  _boxes_type;
  _boxes_type boxes;





  typedef boost::shared_ptr< ::atc_msgs::Detector_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atc_msgs::Detector_<ContainerAllocator> const> ConstPtr;

}; // struct Detector_

typedef ::atc_msgs::Detector_<std::allocator<void> > Detector;

typedef boost::shared_ptr< ::atc_msgs::Detector > DetectorPtr;
typedef boost::shared_ptr< ::atc_msgs::Detector const> DetectorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::atc_msgs::Detector_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::atc_msgs::Detector_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::atc_msgs::Detector_<ContainerAllocator1> & lhs, const ::atc_msgs::Detector_<ContainerAllocator2> & rhs)
{
  return lhs.boxes == rhs.boxes;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::atc_msgs::Detector_<ContainerAllocator1> & lhs, const ::atc_msgs::Detector_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace atc_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::atc_msgs::Detector_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::atc_msgs::Detector_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::atc_msgs::Detector_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::atc_msgs::Detector_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atc_msgs::Detector_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atc_msgs::Detector_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::atc_msgs::Detector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "075cefda6276275756547236e6be1e6a";
  }

  static const char* value(const ::atc_msgs::Detector_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x075cefda62762757ULL;
  static const uint64_t static_value2 = 0x56547236e6be1e6aULL;
};

template<class ContainerAllocator>
struct DataType< ::atc_msgs::Detector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "atc_msgs/Detector";
  }

  static const char* value(const ::atc_msgs::Detector_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::atc_msgs::Detector_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Default value should be 0.5 (for center)\n"
"# 			   0.0  for left (or up)\n"
"#                         1.0  for right (down)\n"
"BoundingBox[] boxes\n"
"\n"
"\n"
"================================================================================\n"
"MSG: atc_msgs/BoundingBox\n"
"# Default value should be 0.5 (for center)\n"
"# 			   0.0  for left (or up)\n"
"#                         1.0  for right (down)\n"
"float32 pixelPosRight\n"
"float32 pixelPosDown\n"
"float32 width\n"
"float32 height\n"
;
  }

  static const char* value(const ::atc_msgs::Detector_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::atc_msgs::Detector_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.boxes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Detector_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::atc_msgs::Detector_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::atc_msgs::Detector_<ContainerAllocator>& v)
  {
    s << indent << "boxes[]" << std::endl;
    for (size_t i = 0; i < v.boxes.size(); ++i)
    {
      s << indent << "  boxes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::atc_msgs::BoundingBox_<ContainerAllocator> >::stream(s, indent + "    ", v.boxes[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ATC_MSGS_MESSAGE_DETECTOR_H
