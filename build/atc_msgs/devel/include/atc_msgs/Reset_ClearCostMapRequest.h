// Generated by gencpp from file atc_msgs/Reset_ClearCostMapRequest.msg
// DO NOT EDIT!


#ifndef ATC_MSGS_MESSAGE_RESET_CLEARCOSTMAPREQUEST_H
#define ATC_MSGS_MESSAGE_RESET_CLEARCOSTMAPREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace atc_msgs
{
template <class ContainerAllocator>
struct Reset_ClearCostMapRequest_
{
  typedef Reset_ClearCostMapRequest_<ContainerAllocator> Type;

  Reset_ClearCostMapRequest_()
    : reset_clear_costmap(false)  {
    }
  Reset_ClearCostMapRequest_(const ContainerAllocator& _alloc)
    : reset_clear_costmap(false)  {
  (void)_alloc;
    }



   typedef uint8_t _reset_clear_costmap_type;
  _reset_clear_costmap_type reset_clear_costmap;





  typedef boost::shared_ptr< ::atc_msgs::Reset_ClearCostMapRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::atc_msgs::Reset_ClearCostMapRequest_<ContainerAllocator> const> ConstPtr;

}; // struct Reset_ClearCostMapRequest_

typedef ::atc_msgs::Reset_ClearCostMapRequest_<std::allocator<void> > Reset_ClearCostMapRequest;

typedef boost::shared_ptr< ::atc_msgs::Reset_ClearCostMapRequest > Reset_ClearCostMapRequestPtr;
typedef boost::shared_ptr< ::atc_msgs::Reset_ClearCostMapRequest const> Reset_ClearCostMapRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::atc_msgs::Reset_ClearCostMapRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::atc_msgs::Reset_ClearCostMapRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::atc_msgs::Reset_ClearCostMapRequest_<ContainerAllocator1> & lhs, const ::atc_msgs::Reset_ClearCostMapRequest_<ContainerAllocator2> & rhs)
{
  return lhs.reset_clear_costmap == rhs.reset_clear_costmap;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::atc_msgs::Reset_ClearCostMapRequest_<ContainerAllocator1> & lhs, const ::atc_msgs::Reset_ClearCostMapRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace atc_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::atc_msgs::Reset_ClearCostMapRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::atc_msgs::Reset_ClearCostMapRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::atc_msgs::Reset_ClearCostMapRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::atc_msgs::Reset_ClearCostMapRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atc_msgs::Reset_ClearCostMapRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::atc_msgs::Reset_ClearCostMapRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::atc_msgs::Reset_ClearCostMapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b426c35048033988a1eb9fd5d52f8c2d";
  }

  static const char* value(const ::atc_msgs::Reset_ClearCostMapRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb426c35048033988ULL;
  static const uint64_t static_value2 = 0xa1eb9fd5d52f8c2dULL;
};

template<class ContainerAllocator>
struct DataType< ::atc_msgs::Reset_ClearCostMapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "atc_msgs/Reset_ClearCostMapRequest";
  }

  static const char* value(const ::atc_msgs::Reset_ClearCostMapRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::atc_msgs::Reset_ClearCostMapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Incoming parameter of the service.\n"
"bool reset_clear_costmap\n"
;
  }

  static const char* value(const ::atc_msgs::Reset_ClearCostMapRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::atc_msgs::Reset_ClearCostMapRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.reset_clear_costmap);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Reset_ClearCostMapRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::atc_msgs::Reset_ClearCostMapRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::atc_msgs::Reset_ClearCostMapRequest_<ContainerAllocator>& v)
  {
    s << indent << "reset_clear_costmap: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reset_clear_costmap);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ATC_MSGS_MESSAGE_RESET_CLEARCOSTMAPREQUEST_H
